// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: woff2 woff) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		font-display: optional;
		src: $src;
	}
}

@include font-face(galmuri, "/fonts/galmuri", 400, normal);

// implement dark mode
$colors: (
    light: (
        background: #E7DFFB,
        dim: #584861,
        text: #141217,
        accent: #126E63,
        accent-alt: #085B51,
    ),
    dark: (
        background: #34293a,
        dim: #a491db,
        text: #c9b9f6,
        accent: #1e8ad6,
        accent-600: #3ba0e6,
    ),
);

@function compose-color-variable($color-key) {
    @return '--color-#{$color-key}';
}

:root {
    @each $key, $value in map-get($colors, 'light') {
        #{compose-color-variable($key)}: #{$value};
    }
}

@media (prefers-color-scheme: dark) {
    :root {
        @each $key, $value in map-get($colors, 'dark') {
            #{compose-color-variable($key)}: #{$value};
        }
    }
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if not $index {
        @return $string;
    }

    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
}

@function color-get($palette, $color-key) {
    @return map-get(map-get($colors, $palette), $color-key);
}

@mixin color-assign($property, $color-key, $template: '') {
    $fallback: #{color-get("light", $color-key)};
    $var: var(#{compose-color-variable($color-key)});

    #{$property}: if(str-length($template) == 0, $fallback, #{str-replace($template, $color-placeholder, $fallback)});
    #{$property}: if(str-length($template) == 0, $var, #{str-replace($template, $color-placeholder, $var)});
}